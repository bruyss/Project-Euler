#! python3
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
# are all figurate (polygonal) numbers and are generated by the following
# formulae:

# Triangle      P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
# Square        P4,n=n2     1, 4, 9, 16, 25, ...
# Pentagonal        P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
# Hexagonal     P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
# Heptagonal        P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
# Octagonal     P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
# interesting properties.

# The set is cyclic, in that the last two digits of each number is the first
# two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
# pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for
# which each polygonal type: triangle, square, pentagonal, hexagonal,
# heptagonal, and octagonal, is represented by a different number in the set.


def tri(n):
    return int(n * (n + 1) / 2)


def squ(n):
    return n * n


def pent(n):
    return int(n * (3 * n - 1) / 2)


def hexa(n):
    return n * (2 * n - 1)


def hept(n):
    return int(n * (5 * n - 3) / 2)


def octo(n):
    return n * (3 * n - 2)


def arecyclic(x, y):
    return set(str(x)[-2:]) == set(str(y)[:2])


assert(arecyclic(8128, 8236))
assert(not arecyclic(8128, 8128))

maxr = 141
# functions = (tri, squ, pent, hexa, hept, octo)
functions = (tri, squ, pent)

indexlist = [[func(n) for n in range(maxr)] for func in functions]

answerspace = []
for func in functions:
    new = [func(n) for n in range(maxr) if len(str(func(n))) == 4]
    answerspace.append(new)

print(answerspace)

res = [[x] for x in answerspace[0]]

for i in range(1, len(functions)):
    print(f"Iteration {functions[i].__name__}")
    newres = []
    for possibleanswer in res:
        print(f"Checking {possibleanswer}")
        for a in answerspace[i]:
            # print(f"{possibleanswer[-1]} & {a}")
            if arecyclic(possibleanswer[-1], a):
                print(f"{possibleanswer[-1]} & {a} are cyclic")
                newres.append(possibleanswer + [a])
    res = newres

newres = []
for r in res:
    if arecyclic(r[-1], r[0]):
        newres.append(r)

res = newres

for r in res:
    s = ""
    for i, x in enumerate(r):
        s += str(indexlist[i].index(x)) + " "
    print(s)

print(res)
print([sum(r) for r in res])
